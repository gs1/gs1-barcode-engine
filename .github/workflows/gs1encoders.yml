name: GS1 Encoders CI

on:
  push:
  pull_request:

jobs:

  #
  #  CI jobs
  #

  ci-clang:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: clang CI
      run: |
        cd src
        make CC=clang

  ci-gcc:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: gcc CI
      run: |
        cd src
        make CC=gcc

  ci-msvc:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1
    - name: MSVC CI
      working-directory: src
      run: msbuild /p:Configuration=release


  #
  #  Production builds
  #

  build-release-windows:

    if: startsWith(github.ref, 'refs/tags/')

    needs:
      - ci-gcc
      - ci-clang
      - ci-msvc

    runs-on: windows-latest

    steps:

    - uses: actions/checkout@v2

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1

    - name: Windows release build
      working-directory: src
      run: msbuild /p:Configuration=release

    - name: Store Windows build
      uses: actions/upload-artifact@v2
      with:
        name: windows-build
        path: src/x64/Release/gs1encoders.exe

  build-release-linux:

    if: startsWith(github.ref, 'refs/tags/')

    needs:
      - ci-gcc
      - ci-clang
      - ci-msvc

    runs-on: ubuntu-latest

    steps:

    - uses: actions/checkout@v2

    - name: Linux release build
      working-directory: src
      run: make CC=clang

    - name: Store Linux build
      uses: actions/upload-artifact@v2
      with:
        name: linux-build
        path: src/gs1encoders-linux.bin


  #
  #  Create release and upload artifacts
  #

  create-release:

    runs-on: ubuntu-latest

    needs:
      - build-release-linux
      - build-release-windows

    steps:

    - name: Load Windows build
      uses: actions/download-artifact@v2
      with:
        name: windows-build

    - name: Load Linux build
      uses: actions/download-artifact@v2
      with:
        name: linux-build

    - name: Get version
      id: get_version
      run: |
        VERSION=${GITHUB_REF/refs\/tags\//}
        echo ::set-output name=VERSION::$VERSION

    - name: Create GitHub release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false

    - name: "Upload asset: Windows EXE"
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: gs1encoders.exe
        asset_name: gs1encoders.exe
        asset_content_type: application/vnd.microsoft.portable-executable

    - name: "Upload asset: Linux bin"
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: gs1encoders-linux.bin
        asset_name: gs1encoders-linux.bin
        asset_content_type: application/octet-stream

